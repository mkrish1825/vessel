name: Restrict Merge to Master

on:
  pull_request:
    branches:
      - master
    types: [opened, reopened, synchronize, ready_for_review]
  pull_request_target:
    branches:
      - master
    types: [opened, reopened, synchronize, ready_for_review]

permissions:
  pull-requests: write
  contents: read

jobs:
  restrict-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Validate source branch and comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const sourceBranch = context.payload.pull_request.head.ref;
            const targetBranch = context.payload.pull_request.base.ref;
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;

            console.log(`🔍 Checking PR #${prNumber}: ${sourceBranch} → ${targetBranch}`);

            // Only check if the target branch is master
            if (targetBranch !== "master") {
              console.log("Not targeting master, skipping check.");
              return;
            }

            if (!sourceBranch.startsWith("release/")) {
              const message = `
❌ **Merge Blocked!**
🚫 Merging from branch \`${sourceBranch}\` to \`${targetBranch}\` is **not allowed**.
✅ Only branches matching the pattern \`release/*\` are permitted to merge into master.

Please create a release branch (e.g. \`release/v1.2.0\`) and open the PR from that branch.
`;

              // Fetch existing comments to avoid duplicates
              const { data: comments } = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number: prNumber,
              });

              const existing = comments.find(c =>
                c.user.type === "Bot" && c.body.includes("Merge Blocked!")
              );

              if (existing) {
                console.log("🔁 Updating existing PR comment...");
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: existing.id,
                  body: message,
                });
              } else {
                console.log("💬 Creating new PR comment...");
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: prNumber,
                  body: message,
                });
              }

              core.setFailed(`❌ Merge blocked: ${sourceBranch} → ${targetBranch}`);
            } else {
              console.log(`✅ Merge allowed from ${sourceBranch} → ${targetBranch}`);
            }
